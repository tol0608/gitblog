{"componentChunkName":"component---src-templates-blog-post-js","path":"/programming-basics/index0525/","result":{"data":{"site":{"siteMetadata":{"title":"오늘도 앞으로"}},"markdownRemark":{"id":"adca1d67-84b0-525c-b021-762a4fd0d0c1","excerpt":"…","html":"<ul>\n<li>\n<p>이항연산자 형변환</p>\n<p><code class=\"language-text\">byte</code> 값과 <code class=\"language-text\">short</code> 값의 덧셈 연산을 수행하면, 자동으로 <code class=\"language-text\">int</code> 값으로 변환됩니다. 이를 다시 <code class=\"language-text\">byte</code> 값으로 형변환하려면 <code class=\"language-text\">(byte)</code>를 명시적으로 사용해야 합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">byte</span> b <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">short</span> s <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">byte</span> result <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">byte</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>b <span class=\"token operator\">+</span> s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><code class=\"language-text\">char</code>와 <code class=\"language-text\">int</code> 타입의 덧셈 연산을 수행하면, 자동으로 <code class=\"language-text\">int</code> 값으로 변환됩니다. 따라서, <code class=\"language-text\">char</code> 값을 <code class=\"language-text\">int</code> 값으로 변환한 후 덧셈 연산을 수행해주어야 합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">char</span> c <span class=\"token operator\">=</span> <span class=\"token char\">'A'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> result <span class=\"token operator\">=</span> c <span class=\"token operator\">+</span> i<span class=\"token punctuation\">;</span></code></pre></div>\n<p>float 타입과 int 타입의 덧셈 연산을 수행하면, 자동으로 int 타입으로 변환됩니다. 따라서, 명시적으로 float 타입으로 변환해주어야 합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">float</span> f <span class=\"token operator\">=</span> <span class=\"token number\">1.23f</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">float</span> result <span class=\"token operator\">=</span> f <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span><span class=\"token punctuation\">)</span>n<span class=\"token punctuation\">;</span></code></pre></div>\n<p>long과 float을 더하면, 두 값 모두 자동으로 float으로 형변환됩니다. 따라서, 결과값도 float 타입이 됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">long</span> l <span class=\"token operator\">=</span> <span class=\"token number\">1234567890123456789L</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">float</span> f <span class=\"token operator\">=</span> <span class=\"token number\">3.14f</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token keyword\">float</span> result <span class=\"token operator\">=</span> l <span class=\"token operator\">+</span> f<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"result: \"</span> <span class=\"token operator\">+</span> result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span></code></pre></div>\n<p>float 값과 double 값의 덧셈 연산을 수행하면, float 값이 double 값으로 자동 형변환됩니다. 따라서, 결과값도 double 타입이 됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">float</span> f <span class=\"token operator\">=</span> <span class=\"token number\">1.23f</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">double</span> d <span class=\"token operator\">=</span> <span class=\"token number\">2.34</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">double</span> result <span class=\"token operator\">=</span> f <span class=\"token operator\">+</span> d<span class=\"token punctuation\">;</span></code></pre></div>\n</li>\n<li>\n<p>나머지 연산자</p>\n<p>나머지 연산자(%)는 두 개의 값을 나눈 후에, 나머지 값을 반환합니다. 예를 들어, <code class=\"language-text\">5 % 3</code>은 2를 반환합니다.</p>\n<p>나머지 연산자는 주로 짝수, 홀수 판별에 사용됩니다. 짝수와 홀수를 나누면 나머지가 각각 0과 1이기 때문입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"짝수입니다.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"홀수입니다.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span></code></pre></div>\n<p>위 코드는 주어진 수가 짝수인지 홀수인지 판별하는 코드입니다. <code class=\"language-text\">n % 2 == 0</code>은 <code class=\"language-text\">n</code>을 2로 나눈 나머지가 0인지 확인하는 것입니다. 만약 나머지가 0이라면, <code class=\"language-text\">n</code>은 짝수이므로 \"짝수입니다.\"를 출력하고, 그렇지 않다면 홀수이므로 \"홀수입니다.\"를 출력합니다.</p>\n</li>\n<li>\n<p>쉬프트 연산자</p>\n<p>쉬프트 연산자는 비트를 이동시키는 연산자입니다. 쉬프트 연산자에는 <code class=\"language-text\">&lt;&lt;</code>, <code class=\"language-text\">>></code>, <code class=\"language-text\">>>></code> 연산자가 있습니다.</p>\n<h3 id=\"-연산자\" style=\"position:relative;\"><a href=\"#-%EC%97%B0%EC%82%B0%EC%9E%90\" aria-label=\" 연산자 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>&#x3C;&#x3C; 연산자</h3>\n<p><code class=\"language-text\">&lt;&lt;</code> 연산자는 왼쪽으로 비트를 이동시키는 연산자입니다. 연산자 왼쪽에 위치한 피연산자의 비트를 지정된 수만큼 왼쪽으로 이동시킨 후, 오른쪽에 남은 비트는 0으로 채워집니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> <span class=\"token number\">8</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 16</span>\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 32</span>\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 64</span>\n\t<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>위 코드는 <code class=\"language-text\">n</code>의 비트를 왼쪽으로 1, 2, 3비트 이동시킨 결과를 출력하는 코드입니다.</p>\n<h3 id=\"-연산자-1\" style=\"position:relative;\"><a href=\"#-%EC%97%B0%EC%82%B0%EC%9E%90-1\" aria-label=\" 연산자 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>>> 연산자</h3>\n<p><code class=\"language-text\">>></code> 연산자는 오른쪽으로 비트를 이동시키는 연산자입니다. 연산자 왼쪽에 위치한 피연산자의 비트를 지정된 수만큼 오른쪽으로 이동시킨 후, 왼쪽에 남은 비트는 부호비트로 채워집니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> <span class=\"token number\">8</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">>></span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 4</span>\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">>></span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 2</span>\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">>></span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 1</span>\n\t<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>위 코드는 <code class=\"language-text\">n</code>의 비트를 오른쪽으로 1, 2, 3비트 이동시킨 결과를 출력하는 코드입니다.</p>\n<h3 id=\"-연산자-2\" style=\"position:relative;\"><a href=\"#-%EC%97%B0%EC%82%B0%EC%9E%90-2\" aria-label=\" 연산자 2 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>>>> 연산자</h3>\n<p><code class=\"language-text\">>>></code> 연산자는 오른쪽으로 비트를 이동시키는 연산자입니다. 연산자 왼쪽에 위치한 피연산자의 비트를 지정된 수만큼 오른쪽으로 이동시킨 후, 왼쪽에 남은 비트는 0으로 채워집니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">8</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">>>></span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 2147483644</span>\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">>>></span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 1073741822</span>\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">>>></span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 536870911</span>\n\t<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>위 코드는 <code class=\"language-text\">n</code>의 비트를 오른쪽으로 1, 2, 3비트 이동시킨 결과를 출력하는 코드입니다. <code class=\"language-text\">n</code>이 음수이기 때문에, <code class=\"language-text\">>>></code> 연산자를 사용했을 때 왼쪽에 남는 비트는 0이 아닌 1로 채워집니다.</p>\n</li>\n<li>\n<p>비트 연산자</p>\n<p>두 개의 비트열을 연산하는 연산자입니다.\n비트 연산자에는 비트 AND(&#x26;), 비트 OR(|), 비트 XOR(^), 비트 NOT(~) 연산자가 있습니다.</p>\n<h3 id=\"비트-AND-연산\" style=\"position:relative;\"><a href=\"#%EB%B9%84%ED%8A%B8-AND-%EC%97%B0%EC%82%B0\" aria-label=\"비트 AND 연산 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>비트 AND 연산(&#x26;)</h3>\n<p>두 비트열을 AND 연산한 결과를 반환합니다. AND 연산을 수행하는 비트가 모두 1인 경우에만 결과 비트열의 해당 비트가 1이 됩니다. 예를 들어, <code class=\"language-text\">1010 &amp; 1100</code>은 <code class=\"language-text\">1000</code>을 반환합니다.</p>\n<h3 id=\"비트-OR-연산\" style=\"position:relative;\"><a href=\"#%EB%B9%84%ED%8A%B8-OR-%EC%97%B0%EC%82%B0\" aria-label=\"비트 OR 연산 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>비트 OR 연산(|)</h3>\n<p>두 비트열을 OR 연산한 결과를 반환합니다. OR 연산을 수행하는 비트 중 하나 이상이 1인 경우 해당 비트가 1이 됩니다. 예를 들어, <code class=\"language-text\">1010 | 1100</code>은 <code class=\"language-text\">1110</code>을 반환합니다.</p>\n<h3 id=\"비트-XOR-연산\" style=\"position:relative;\"><a href=\"#%EB%B9%84%ED%8A%B8-XOR-%EC%97%B0%EC%82%B0\" aria-label=\"비트 XOR 연산 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>비트 XOR 연산(^)</h3>\n<p>두 비트열을 XOR 연산한 결과를 반환합니다. XOR 연산을 수행하는 비트가 모두 동일한 경우 해당 비트는 0이 됩니다. 예를 들어, <code class=\"language-text\">1010 ^ 1100</code>은 <code class=\"language-text\">0110</code>을 반환합니다.</p>\n<h3 id=\"비트-NOT-연산\" style=\"position:relative;\"><a href=\"#%EB%B9%84%ED%8A%B8-NOT-%EC%97%B0%EC%82%B0\" aria-label=\"비트 NOT 연산 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>비트 NOT 연산(~)</h3>\n<p>비트열을 NOT 연산한 결과를 반환합니다. NOT 연산을 수행하는 비트가 1인 경우 해당 비트는 0이 되고, 0인 경우 해당 비트는 1이 됩니다. 예를 들어, <code class=\"language-text\">~1010</code>은 <code class=\"language-text\">0101</code>을 반환합니다.</p>\n<h3 id=\"비트-이동-연산자\" style=\"position:relative;\"><a href=\"#%EB%B9%84%ED%8A%B8-%EC%9D%B4%EB%8F%99-%EC%97%B0%EC%82%B0%EC%9E%90\" aria-label=\"비트 이동 연산자 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>비트 이동 연산자</h3>\n<p>비트 이동 연산자는 비트열을 왼쪽이나 오른쪽으로 이동시키는 연산자입니다. 이동시키는 비트열의 개수를 지정합니다.</p>\n<p>비트 이동 연산자에는 <code class=\"language-text\">&lt;&lt;</code>(왼쪽으로 이동), <code class=\"language-text\">>></code>(오른쪽으로 이동), <code class=\"language-text\">>>></code>(오른쪽으로 이동) 연산자가 있습니다.</p>\n<h3 id=\"왼쪽-시프트-연산자\" style=\"position:relative;\"><a href=\"#%EC%99%BC%EC%AA%BD-%EC%8B%9C%ED%94%84%ED%8A%B8-%EC%97%B0%EC%82%B0%EC%9E%90\" aria-label=\"왼쪽 시프트 연산자 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>왼쪽 시프트 연산자(&#x3C;&#x3C;)</h3>\n<p>비트열을 왼쪽으로 이동시킵니다. 예를 들어, <code class=\"language-text\">1010 &lt;&lt; 2</code>는 <code class=\"language-text\">101000</code>을 반환합니다.</p>\n<h3 id=\"오른쪽-시프트-연산자\" style=\"position:relative;\"><a href=\"#%EC%98%A4%EB%A5%B8%EC%AA%BD-%EC%8B%9C%ED%94%84%ED%8A%B8-%EC%97%B0%EC%82%B0%EC%9E%90\" aria-label=\"오른쪽 시프트 연산자 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>오른쪽 시프트 연산자(>>)</h3>\n<p>비트열을 오른쪽으로 이동시킵니다. 예를 들어, <code class=\"language-text\">1010 >> 2</code>는 <code class=\"language-text\">0010</code>을 반환합니다.</p>\n<h3 id=\"오른쪽-시프트-연산자-1\" style=\"position:relative;\"><a href=\"#%EC%98%A4%EB%A5%B8%EC%AA%BD-%EC%8B%9C%ED%94%84%ED%8A%B8-%EC%97%B0%EC%82%B0%EC%9E%90-1\" aria-label=\"오른쪽 시프트 연산자 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>오른쪽 시프트 연산자(>>>)</h3>\n<p>비트열을 오른쪽으로 이동시킵니다. 이동하는 비트열의 왼쪽 비트는 0으로 채워집니다. 예를 들어, <code class=\"language-text\">1010 >>> 2</code>는 <code class=\"language-text\">00001010</code>을 반환합니다.</p>\n  <aside>\n  👉 위 코드에서 산술 연산자와 비트 연산자를 혼용해서 사용했습니다. 산술 연산자는 비트 연산자보다 우선순위가 높기 때문에, 산술 연산자를 먼저 계산한 후에 비트 연산자를 계산합니다.\n  </aside>\n</li>\n<li>\n<p>논리 연산자</p>\n<p>논리값을 연산하는 연산자입니다.\n논리 연산자에는 논리 AND(&#x26;&#x26;), 논리 OR(||), 논리 NOT(!) 연산자가 있습니다.</p>\n<h3 id=\"논리-AND-연산\" style=\"position:relative;\"><a href=\"#%EB%85%BC%EB%A6%AC-AND-%EC%97%B0%EC%82%B0\" aria-label=\"논리 AND 연산 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>논리 AND 연산(&#x26;&#x26;)</h3>\n<p>두 논리값을 AND 연산한 결과를 반환합니다. AND 연산을 수행하는 논리값이 모두 true인 경우에만 결과값이 true가 됩니다. 예를 들어, <code class=\"language-text\">(true &amp;&amp; false)</code>는 false를 반환합니다.</p>\n<h3 id=\"논리-OR-연산\" style=\"position:relative;\"><a href=\"#%EB%85%BC%EB%A6%AC-OR-%EC%97%B0%EC%82%B0\" aria-label=\"논리 OR 연산 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>논리 OR 연산(||)</h3>\n<p>두 논리값을 OR 연산한 결과를 반환합니다. OR 연산을 수행하는 논리값 중 하나 이상이 true인 경우 결과값이 true가 됩니다. 예를 들어, <code class=\"language-text\">(true || false)</code>는 true를 반환합니다.</p>\n<h3 id=\"논리-NOT-연산\" style=\"position:relative;\"><a href=\"#%EB%85%BC%EB%A6%AC-NOT-%EC%97%B0%EC%82%B0\" aria-label=\"논리 NOT 연산 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>논리 NOT 연산(!)</h3>\n<p>논리값을 NOT 연산한 결과를 반환합니다. NOT 연산을 수행하는 논리값이 true인 경우 결과값이 false가 되고, false인 경우 결과값이 true가 됩니다. 예를 들어, <code class=\"language-text\">!true</code>는 false를 반환합니다.</p>\n<h3 id=\"논리-연산자-우선순위\" style=\"position:relative;\"><a href=\"#%EB%85%BC%EB%A6%AC-%EC%97%B0%EC%82%B0%EC%9E%90-%EC%9A%B0%EC%84%A0%EC%88%9C%EC%9C%84\" aria-label=\"논리 연산자 우선순위 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>논리 연산자 우선순위</h3>\n<p>논리 연산자는 NOT, AND, OR 순으로 우선순위를 갖습니다. 따라서, NOT 연산이 가장 먼저 수행되고, AND 연산이 OR 연산보다 우선순위가 높습니다. 예를 들어, <code class=\"language-text\">!true || false &amp;&amp; true</code> 연산은 <code class=\"language-text\">(!true) || (false &amp;&amp; true)</code> 순으로 수행됩니다.</p>\n  <aside>\n  👉 위에서 언급한 연산자 우선순위는 괄호를 사용하지 않았을 경우의 기본 우선순위입니다. 괄호를 사용하면 괄호 안의 연산이 가장 먼저 수행됩니다.\n  </aside>\n</li>\n<li>\n<p>삼항 연산자</p>\n<p>삼항 연산자는 <code class=\"language-text\">조건식 ? 참일 때 값 : 거짓일 때 값</code>의 형태로 구성됩니다. 조건식이 참일 경우 <code class=\"language-text\">참일 때 값</code>이 반환되고, 거짓일 경우 <code class=\"language-text\">거짓일 때 값</code>이 반환됩니다. 예를 들어, <code class=\"language-text\">n > 0 ? \"양수\" : \"음수\"</code>는 <code class=\"language-text\">n</code>이 양수일 경우 \"양수\"를 반환하고, 음수일 경우 \"음수\"를 반환합니다.</p>\n<p>삼항 연산자는 if-else 문을 대체하기 위해 사용될 수 있습니다. 예를 들어, 아래의 코드는 if-else 문을 사용한 코드와 삼항 연산자를 사용한 코드가 동일합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"짝수입니다.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"홀수입니다.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">?</span> <span class=\"token string\">\"짝수입니다.\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"홀수입니다.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3 id=\"중첩된-삼항-연산자\" style=\"position:relative;\"><a href=\"#%EC%A4%91%EC%B2%A9%EB%90%9C-%EC%82%BC%ED%95%AD-%EC%97%B0%EC%82%B0%EC%9E%90\" aria-label=\"중첩된 삼항 연산자 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>중첩된 삼항 연산자</h3>\n<p>삼항 연산자는 중첩해서 사용할 수 있습니다. 예를 들어, <code class=\"language-text\">n</code>이 0보다 큰 경우 \"양수\", 0보다 작은 경우 \"음수\", 0인 경우 \"영\"을 반환하는 코드는 아래와 같이 작성할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token operator\">?</span> <span class=\"token string\">\"양수\"</span> <span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">?</span> <span class=\"token string\">\"음수\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"영\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>위 코드에서는 먼저 <code class=\"language-text\">n > 0</code>을 평가하고, 참일 경우 \"양수\"를 반환합니다. 거짓일 경우 다시 <code class=\"language-text\">n &lt; 0</code>을 평가하고, 참일 경우 \"음수\"를 반환합니다. 거짓일 경우 \"영\"을 반환합니다.</p>\n<p>2중 for문은 반복문을 중첩해서 사용하는 것을 의미합니다. 바깥쪽 반복문과 안쪽 반복문이 순차적으로 실행되면서, 안쪽 반복문은 바깥쪽 반복문이 한 번 실행될 때마다 처음부터 끝까지 실행됩니다.</p>\n<p>다음은 2중 for문을 사용하여 구구단을 출력하는 코드입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> <span class=\"token number\">9</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">+</span> <span class=\"token string\">\"단: \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;=</span> <span class=\"token number\">9</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">*</span> j <span class=\"token operator\">+</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>위 코드에서 바깥쪽 반복문은 2부터 9까지의 숫자를 반복하며, 안쪽 반복문은 1부터 9까지의 숫자를 반복합니다. 안쪽 반복문은 바깥쪽 반복문이 한 번 실행될 때마다 처음부터 끝까지 실행되며, 각각의 반복에서 <code class=\"language-text\">i * j</code>를 출력합니다. 바깥쪽 반복문에 해당하는 구구단의 단 수는 한 번 출력한 후 <code class=\"language-text\">System.out.println()</code>을 호출하여 줄을 바꿉니다.</p>\n  <aside>\n  👉 2중 for문은 반복문을 중첩해서 사용하기 때문에, 반복 횟수가 많아질수록 성능이 저하될 수 있습니다. 따라서, 반복 횟수가 많은 경우에는 다른 방법을 고려해야 합니다.\n  </aside>\n</li>\n</ul>","tableOfContents":"","frontmatter":{"title":"프로그래밍 기초 2","date":"May 25, 2023","description":"연산자 및 형변환","tags":["개발","프로그래밍 기초"]}},"previous":{"fields":{"slug":"/leapyear/"},"frontmatter":{"title":"윤년 계산 프로그램"}},"next":{"fields":{"slug":"/lastday/"},"frontmatter":{"title":"월의 마지막일자 계산 프로그램"}}},"pageContext":{"id":"adca1d67-84b0-525c-b021-762a4fd0d0c1","previousPostId":"049b93ad-0e43-5cba-9302-fe6ef7e34ffe","nextPostId":"d7b46260-c9c6-5b79-8af7-83c149adda08"}},"staticQueryHashes":["3000541721","3274528899"],"slicesMap":{}}