{"componentChunkName":"component---src-templates-blog-post-js","path":"/programming-basics/index0530/","result":{"data":{"site":{"siteMetadata":{"title":"오늘도 앞으로"}},"markdownRemark":{"id":"ccc34488-d39c-5d66-a053-aca5434f7f31","excerpt":"반복문 Java에는 크게 4가지 종류의 반복문이 있습니다. for문 for문은 주어진 조건이 true인 경우 반복문 안에서 코드 블록을 실행합니다. 반복문이 실행될 때마다, 조건식이 다시 평가되고, 조건식이 false가 될 때까지 계속 반복됩니다. while문 while…","html":"<ul>\n<li>\n<p>반복문</p>\n<p>Java에는 크게 4가지 종류의 반복문이 있습니다.</p>\n<ul>\n<li>\n<p>for문</p>\n<p>for문은 주어진 조건이 true인 경우 반복문 안에서 코드 블록을 실행합니다. 반복문이 실행될 때마다, 조건식이 다시 평가되고, 조건식이 false가 될 때까지 계속 반복됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>조건식<span class=\"token punctuation\">;</span>조건식<span class=\"token punctuation\">;</span>증감식<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 조건식이 true인 경우 수행될 문장들을 적습니다</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// EX</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n<li>\n<p>while문</p>\n<p>while문은 주어진 조건이 true인 경우, 코드 블록을 반복적으로 실행합니다. 조건식을 먼저 평가하고, 그 값이 true인 경우 코드 블록을 실행합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>조건식<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 조건식이 true인 경우 수행될 문장들을 적습니다</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// EX</span>\n<span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>while문을 사용할 때에는 미지수가 바뀌는 조건을 명확히 제시해야 합니다. (예: i++ 등)</p>\n</li>\n<li>\n<p>do-while문</p>\n<p>do-while문은 while문과 매우 유사하지만, 코드 블록을 한 번 실행하고 나서 비로소 조건식을 평가합니다. 이것은 코드 블록이 최소한 한 번은 반복되도록 보장합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">do</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 조건식이 true인 경우 수행될 문장들을 적습니다</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>조건식<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// EX</span>\n<span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">do</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>do-while문 역시 미지수가 바뀌는 조건을 명확히 제시해야 합니다. (예: i++ 등)</p>\n<p>while(조건식); ← 세미콜론을 잊으면 안됩니다.</p>\n<aside>\n👌 while문과 do-while문 중 어떤 것을 사용할지는 상황에 따라 다릅니다. 만약 반복문이 한 번 이상 실행되어야 할 때는 do-while문을 사용하면 됩니다. 그러나 반복문이 실행되지 않을 수도 있고, 반복 횟수를 미리 알고 있을 때는 while문을 사용하는 것이 좋습니다.\n</aside>\n</li>\n</ul>\n</li>\n</ul>","tableOfContents":"","frontmatter":{"title":"프로그래밍 기초 4","date":"May 30, 2023","description":"반복문","tags":["개발","프로그래밍 기초"]}},"previous":{"fields":{"slug":"/gugudan/"},"frontmatter":{"title":"구구단"}},"next":{"fields":{"slug":"/programming-basics/index0531/"},"frontmatter":{"title":"프로그래밍 기초 5"}}},"pageContext":{"id":"ccc34488-d39c-5d66-a053-aca5434f7f31","previousPostId":"4a1c5152-b495-5e95-a66b-f58ee07b65db","nextPostId":"3d96774c-dace-56be-9174-951b6a196bf6"}},"staticQueryHashes":["3000541721","3274528899"],"slicesMap":{}}