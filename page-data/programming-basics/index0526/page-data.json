{"componentChunkName":"component---src-templates-blog-post-js","path":"/programming-basics/index0526/","result":{"data":{"site":{"siteMetadata":{"title":"오늘도 앞으로"}},"markdownRemark":{"id":"1af77693-4a46-5f2b-836b-731769c4ec40","excerpt":"조건문이란? 조건문은 주어진 조건이 참(True)인지 거짓(False)인지 판단하고, 그 결과에 따라 다른 코드를 실행할 수 있게 해줍니다. 대표적인 조건문으로는 if문이 있으며, if…","html":"<ul>\n<li>\n<p>조건문이란?</p>\n<p>조건문은 주어진 조건이 참(True)인지 거짓(False)인지 판단하고, 그 결과에 따라 다른 코드를 실행할 수 있게 해줍니다. 대표적인 조건문으로는 if문이 있으며, if문을 통해 프로그램은 특정 조건에 따라서 다른 코드를 실행할 수 있습니다.</p>\n  <aside>\n  💡 조건문 = 미지수가 들어간 명제\n  </aside>\n<p>예를 들어서, 만약에 비가 오는 날에는 우산을 챙겨야 한다고 하면, 프로그램에서는 이렇게 작성할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">if</span> 비가 오는지 여부<span class=\"token operator\">:</span>\n    우산 챙기기\n</code></pre></div>\n<p>이렇게 조건문을 사용하면, 비가 오는지 여부에 따라서 우산을 챙기는 코드가 실행될 수 있습니다.</p>\n<ul>\n<li>\n<p>🤔 중첩 if문</p>\n<p>중첩 if문은 if문 안에 또 다른 if문이 있는 구조를 말합니다. 중첩 if문을 사용하면, 더욱 복잡한 조건들을 다룰 수 있습니다.</p>\n<p>다음은 중첩 if문을 사용한 예시입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>조건<span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>조건<span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 조건1과 조건2가 모두 참일 때 실행할 코드</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 조건1은 참이지만, 조건2가 거짓일 때 실행할 코드</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 조건1이 거짓일 때 실행할 코드</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>위의 코드에서는 먼저 조건1을 판단합니다. 만약 조건1이 참이라면, 다음으로 조건2를 판단합니다. 조건1과 조건2가 모두 참이면, 첫 번째 if문 안에 있는 코드가 실행됩니다. 만약 조건1은 참이지만, 조건2가 거짓이면, 두 번째 else문 안에 있는 코드가 실행됩니다. 조건1이 거짓이라면, 마지막 else문 안에 있는 코드가 실행됩니다.</p>\n</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li>\n<p>Swich 문법</p>\n<p>switch 문법은 주어진 변수나 식(expression)의 값에 따라서 다른 코드를 실행할 수 있게 해줍니다. switch 문법은 if문과 유사하지만, 많은 경우 switch 문법을 사용하는 것이 더 간결하고 가독성이 좋습니다.</p>\n<p>switch 문법은 다음과 같이 작성할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">switch</span><span class=\"token punctuation\">(</span>expression<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">case</span> value1<span class=\"token operator\">:</span>\n    <span class=\"token comment\">// value1 일 때 실행할 코드</span>\n    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">case</span> value2<span class=\"token operator\">:</span>\n    <span class=\"token comment\">// value2 일 때 실행할 코드</span>\n    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">default</span><span class=\"token operator\">:</span>\n    <span class=\"token comment\">// 위의 모든 case 에 해당하지 않을 때 실행할 코드</span>\n    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>expression의 값이 value1일 때는 첫 번째 case에 해당하는 코드가 실행되고, value2일 때는 두 번째 case에 해당하는 코드가 실행됩니다. 만약에 expression의 값이 어떤 case와도 일치하지 않을 때는 default에 해당하는 코드가 실행됩니다.</p>\n<p>switch 문법은 여러 개의 조건을 판단할 때 유용합니다. 예를 들어, 사용자가 선택한 옵션에 따라서 다른 코드를 실행해야 할 때 switch 문법을 사용할 수 있습니다.</p>\n</li>\n<li>\n<p>Math.random 메소드</p>\n<p><code class=\"language-text\">Math.random()</code> 메소드는 0 이상 1 미만의 구간에서 근사적으로 균일한(approximately uniform) 부동소숫점 의사난수를 반환합니다. 이 메소드는 난수 생성에 사용되며, 게임에서 주사위를 굴리거나 카드를 뽑는 등의 작업에서 활용될 수 있습니다.</p>\n<p><code class=\"language-text\">Math.random()</code> 메소드를 사용하는 예시는 다음과 같습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// 1부터 6까지의 무작위 정수 생성 (주사위 굴리기)</span>\n<span class=\"token keyword\">const</span> dice <span class=\"token operator\">=</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">6</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>dice<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 0부터 51까지의 무작위 정수 생성 (카드 뽑기)</span>\n<span class=\"token keyword\">const</span> card <span class=\"token operator\">=</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">52</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>card<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>위의 코드에서 <code class=\"language-text\">Math.random()</code> 메소드는 0 이상 1 미만의 구간에서 균일한 부동소숫점 의사난수를 생성합니다. 이 값에 6을 곱하고 <code class=\"language-text\">Math.floor()</code> 메소드를 사용하여 소수점 이하를 버린 다음 1을 더하면 1부터 6까지의 무작위 정수를 생성할 수 있습니다. 마찬가지로, 52를 곱하면 0부터 51까지의 무작위 정수를 생성할 수 있습니다.</p>\n</li>\n<li>\n<p>Math.random 문법</p>\n<p>Math.random() 메소드는 0부터 1사이의 랜덤한 숫자를 반환합니다. 이 메소드를 사용하면, 프로그램에서 다양한 랜덤한 값을 생성할 수 있습니다.</p>\n<p>예를 들어서, 1부터 10까지의 랜덤한 숫자를 생성하고 싶다면, 다음과 같이 코드를 작성할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">const</span> randomNumber <span class=\"token operator\">=</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>randomNumber<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>위의 코드에서는 Math.random() 메소드를 사용하여 0부터 1사이의 랜덤한 숫자를 생성합니다. 이후 Math.floor() 메소드를 사용하여 소수점 아래를 버린 후, 10을 곱합니다. 그리고 마지막으로 1을 더해줍니다. 이렇게 하면, 1부터 10까지의 랜덤한 숫자를 생성할 수 있습니다.</p>\n  <aside>\n  💡 Math.floor() 메소드는 소수점 아래를 버린 정수를 반환합니다.\n  </aside>\n</li>\n</ul>","tableOfContents":"","frontmatter":{"title":"프로그래밍 기초 3","date":"May 26, 2023","description":"조건문","tags":["개발","프로그래밍 기초"]}},"previous":{"fields":{"slug":"/lastday/"},"frontmatter":{"title":"월의 마지막일자 계산 프로그램"}},"next":{"fields":{"slug":"/programming-basics/index0530/"},"frontmatter":{"title":"프로그래밍 기초 4"}}},"pageContext":{"id":"1af77693-4a46-5f2b-836b-731769c4ec40","previousPostId":"d7b46260-c9c6-5b79-8af7-83c149adda08","nextPostId":"ccc34488-d39c-5d66-a053-aca5434f7f31"}},"staticQueryHashes":["3000541721","3274528899"],"slicesMap":{}}