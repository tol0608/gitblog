{"componentChunkName":"component---src-templates-blog-post-js","path":"/programming-basics/index0614/","result":{"data":{"site":{"siteMetadata":{"title":"오늘도 앞으로"}},"markdownRemark":{"id":"c57f0e1b-6743-55ac-9ccf-82409df595a2","excerpt":"다형성(plymorphism…","html":"<ul>\n<li>\n<p>다형성(plymorphism)</p>\n<p>다형성은 객체지향 프로그래밍에서 중요한 개념 중 하나입니다.</p>\n<p>다형성은 상속 관계에 있는 클래스들 간에 서로 호환 가능한 것을 말합니다. 즉, 부모 클래스의 인스턴스가 자식 클래스의 인스턴스로 취급될 수 있는 것입니다.</p>\n<p>따라서, 부모 클래스의 레퍼런스는 자식 클래스의 인스턴스를 가리킬 수 있습니다. 이를 업캐스팅이라고도 부릅니다.</p>\n<p>하지만, 자식 클래스의 레퍼런스는 부모 클래스의 인스턴스를 가리킬 수 없습니다. 이를 다운캐스팅이라고 부릅니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// 다형성 예제 1</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token class-name\">Car</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> cars <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Car</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\tcars<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Car</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tcars<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FireEngine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tcars<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Ambulance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Car</span> myCar <span class=\"token operator\">:</span> cars<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\tmyCar<span class=\"token punctuation\">.</span><span class=\"token function\">drive</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// 다형성 예제2</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">driveCar</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Car</span> myCar<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\tmyCar<span class=\"token punctuation\">.</span><span class=\"token function\">drive</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token class-name\">Ex13</span> ex13 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Ex13</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token class-name\">Car</span> myCar <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Car</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token class-name\">FireEngine</span> fire <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FireEngine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token class-name\">Ambulance</span> ambulance <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Ambulance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\tex13<span class=\"token punctuation\">.</span><span class=\"token function\">driveCar</span><span class=\"token punctuation\">(</span>myCar<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tex13<span class=\"token punctuation\">.</span><span class=\"token function\">driveCar</span><span class=\"token punctuation\">(</span>fire<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tex13<span class=\"token punctuation\">.</span><span class=\"token function\">driveCar</span><span class=\"token punctuation\">(</span>ambulance<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// 다형성 예제3</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token class-name\">Car</span> myCar <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FireEngine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\tmyCar<span class=\"token punctuation\">.</span><span class=\"token function\">drive</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tmyCar<span class=\"token punctuation\">.</span><span class=\"token function\">stop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//\t\tmyCar.water();</span>\n\n\t\t<span class=\"token class-name\">FireEngine</span> fire <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">FireEngine</span><span class=\"token punctuation\">)</span> myCar<span class=\"token punctuation\">;</span>\n\t\tfire<span class=\"token punctuation\">.</span><span class=\"token function\">water</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">Car</span> myCar <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Car</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">FireEngine</span> fire <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">FireEngine</span><span class=\"token punctuation\">)</span> <span class=\"token function\">myCar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// == ❌</span>\n\n<span class=\"token class-name\">Car</span> myCar <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FireEngine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">FireEngine</span> fire <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">FireEngine</span><span class=\"token punctuation\">)</span> myCar<span class=\"token punctuation\">;</span> <span class=\"token comment\">// == ⭕️</span></code></pre></div>\n<p>위 코드는 자바에서의 다운캐스팅 예제입니다.</p>\n<p>다운캐스팅은 부모 클래스의 레퍼런스를 자식 클래스의 레퍼런스로 변환하는 것을 말합니다.</p>\n<p>그러나 부모 클래스의 인스턴스를 자식 클래스의 레퍼런스로 변환하는 것은 불가능합니다. 이는 부모 클래스와 자식 클래스의 관계로 설명됩니다.</p>\n<p>따라서, 첫 번째 줄의 코드에서는 <code class=\"language-text\">myCar</code> 변수가 <code class=\"language-text\">Car</code> 인스턴스를 참조하고 있으므로, <code class=\"language-text\">FireEngine</code> 클래스의 레퍼런스로 다운캐스팅하는 것은 불가능합니다. 따라서, <code class=\"language-text\">FireEngine fire = (FireEngine) myCar();</code> 는 컴파일 에러가 발생합니다.</p>\n<p>두 번째 줄의 코드에서는 <code class=\"language-text\">myCar</code> 변수가 <code class=\"language-text\">FireEngine</code> 인스턴스를 참조하고 있으므로, <code class=\"language-text\">FireEngine</code> 클래스의 레퍼런스로 다운캐스팅이 가능합니다. 따라서, <code class=\"language-text\">FireEngine fire = (FireEngine) myCar;</code> 는 정상적으로 동작합니다.</p>\n</li>\n<li>\n<p>instanceof 연산자</p>\n<p><code class=\"language-text\">instanceof</code> 연산자는 객체가 특정 클래스의 인스턴스인지 여부를 확인하는 데 사용됩니다. 이 연산자를 사용하면, 부모 클래스의 레퍼런스가 가리키는 객체가 어떤 자식 클래스의 인스턴스인지 확인할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">Car</span> myCar <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FireEngine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>myCar <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">FireEngine</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"This is a FireEngine.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>위 코드에서 <code class=\"language-text\">instanceof</code> 연산자를 사용하여 <code class=\"language-text\">myCar</code> 객체가 <code class=\"language-text\">FireEngine</code> 클래스의 인스턴스인지 확인하고 있습니다. 따라서, 해당 코드는 \"This is a FireEngine.\" 문장을 출력합니다. 만약 <code class=\"language-text\">myCar</code> 객체가 <code class=\"language-text\">Ambulance</code> 클래스의 인스턴스였다면, 해당 코드는 아무런 출력도 하지 않았을 것입니다.</p>\n</li>\n<li>\n<p>추상클래스(abstract class)</p>\n<p>추상 클래스는 일반적으로 하위 클래스에서 구현해야 하는 메서드를 정의하는 데 사용됩니다. 추상 클래스는 일반 클래스와 달리 인스턴스화할 수 없으며, 하위 클래스에서 상속받아 구현해야 합니다. 추상 클래스는 <code class=\"language-text\">abstract</code> 키워드를 사용하여 정의됩니다. 추상 클래스를 생성하려면, 클래스의 하나 이상의 메서드를 추상 메서드로 선언해야 합니다. 추상 메서드는 메서드 본문이 없으며, 하위 클래스에서 구현되어야 합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Shape</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">void</span> <span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>위 코드에서 <code class=\"language-text\">Shape</code> 클래스는 추상 클래스입니다. <code class=\"language-text\">Shape</code> 클래스는 <code class=\"language-text\">draw</code> 메서드를 추상 메서드로 선언하여, <code class=\"language-text\">Shape</code> 클래스를 상속하는 하위 클래스에서 <code class=\"language-text\">draw</code> 메서드를 구현하도록 요구합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Circle</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Shape</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">,</span> radius<span class=\"token punctuation\">;</span>\n\n   <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// draw circle</span>\n   <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>위 코드에서 <code class=\"language-text\">Circle</code> 클래스는 <code class=\"language-text\">Shape</code> 클래스를 상속하며, <code class=\"language-text\">draw</code> 메서드를 구현합니다. <code class=\"language-text\">Circle</code> 클래스는 <code class=\"language-text\">Shape</code> 클래스에서 상속받은 <code class=\"language-text\">draw</code> 메서드를 구현함으로써, <code class=\"language-text\">Shape</code> 클래스의 인스턴스를 생성할 수 있습니다.</p>\n</li>\n<li>\n<p>추상메서드(abstract method)</p>\n<p>추상 메서드는 메서드의 구현을 하위 클래스에서 수행하도록 요구하는 것입니다. 추상 메서드는 선언만 하고, 구현은 하지 않습니다. 추상 메서드를 선언하는 방법은 다음과 같습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">void</span> <span class=\"token function\">methodName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>추상 메서드를 선언하려면, 메서드 이름 옆에 <code class=\"language-text\">abstract</code> 키워드를 추가하고, 메서드 본문을 작성하지 않아야 합니다. 추상 메서드가 포함된 클래스는 추상 클래스여야 하며, 추상 클래스는 인스턴스화할 수 없습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AbstractClass</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">void</span> <span class=\"token function\">abstractMethod</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>위 코드에서 <code class=\"language-text\">AbstractClass</code> 클래스는 추상 클래스입니다. <code class=\"language-text\">AbstractClass</code> 클래스에는 추상 메서드인 <code class=\"language-text\">abstractMethod</code> 메서드가 선언되어 있습니다. 이 클래스를 상속받는 하위 클래스에서는 <code class=\"language-text\">abstractMethod</code> 메서드를 구현해야 합니다. 추상 메서드를 구현하려면 <code class=\"language-text\">override</code> 키워드를 사용하여 메서드를 오버라이드해야 합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ConcreteClass</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">AbstractClass</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token annotation punctuation\">@Override</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">abstractMethod</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token comment\">// 추상 메서드 구현</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>위 코드에서 <code class=\"language-text\">ConcreteClass</code> 클래스는 <code class=\"language-text\">AbstractClass</code> 클래스를 상속받고, <code class=\"language-text\">abstractMethod</code> 메서드를 구현하고 있습니다. 이 클래스는 <code class=\"language-text\">AbstractClass</code> 클래스의 추상 메서드를 구현했기 때문에, 이 클래스의 인스턴스를 생성할 수 있습니다.</p>\n</li>\n</ul>","tableOfContents":"","frontmatter":{"title":"프로그래밍 기초 13","date":"June 14, 2023","description":"다형성","tags":["개발","프로그래밍 기초","객체지향"]}},"previous":{"fields":{"slug":"/programming-basics/index0613/"},"frontmatter":{"title":"프로그래밍 기초 12"}},"next":{"fields":{"slug":"/programming-basics/index0615/"},"frontmatter":{"title":"프로그래밍 기초 14"}}},"pageContext":{"id":"c57f0e1b-6743-55ac-9ccf-82409df595a2","previousPostId":"7d6ab9f2-1534-5e0c-b6a0-f3b546e14da6","nextPostId":"47b1d014-7fed-5bc7-920a-f06209378720"}},"staticQueryHashes":["3000541721","3274528899"],"slicesMap":{}}