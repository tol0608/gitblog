{"componentChunkName":"component---src-templates-blog-post-js","path":"/programming-basics/index0612/","result":{"data":{"site":{"siteMetadata":{"title":"오늘도 앞으로"}},"markdownRemark":{"id":"2621eaeb-2f69-5b3d-b3b9-7aa8de1442f7","excerpt":"패키지(Package…","html":"<ul>\n<li>\n<p>패키지(Package)</p>\n<p>패키지는 클래스들을 논리적으로 그룹화하고, 이름공간을 분리하여 이름 충돌을 방지하는 기능을 합니다. 패키지는 폴더 구조와 유사하게 사용되며, 클래스들은 해당 패키지에 속하게 됩니다. 패키지를 선언할 때에는 다음과 같은 방식으로 선언합니다.</p>\n<p>패키지의 선언 방법은 다음과 같습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> <span class=\"token punctuation\">{</span>패키지 이름<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>패키지 선언문은 단 한번만 사용할 수 있습니다.</p>\n<p>예를 들어, 다음과 같이 패키지를 선언할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>example<span class=\"token punctuation\">.</span>project</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\"><span class=\"token namespace\">com<span class=\"token punctuation\">.</span>lg<span class=\"token punctuation\">.</span>dept<span class=\"token punctuation\">.</span>project<span class=\"token punctuation\">.</span></span>ClassName</span> <span class=\"token comment\">// 만약 LG라고 한다면,</span>\n<span class=\"token comment\">// 회사도메인 뒤집기, 부서, 프로젝트명, 클래스명 순서대로 적는게 관행</span></code></pre></div>\n<p>패키지는 폴더 구조와 유사하게 사용됩니다. 위의 예제에서 패키지 이름은 com.example.project 이므로, 해당 패키지를 사용하는 클래스는 다음과 같은 경로에 위치해야 합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\">com<span class=\"token operator\">/</span>example<span class=\"token operator\">/</span>project<span class=\"token operator\">/</span><span class=\"token class-name\">ClassName</span><span class=\"token punctuation\">.</span>java</code></pre></div>\n<p>패키지를 사용하면 클래스들을 논리적인 그룹으로 묶어서 쉽게 유지보수할 수 있습니다. 또한, 라이브러리를 만들 때 패키지를 사용하면 라이브러리의 이름공간을 분리할 수 있어서 다른 라이브러리와 이름 충돌을 방지할 수 있습니다.</p>\n  <aside>\n  ➕ JAR(Java Archive)란, 자바 클래스, 리소스, 메타데이터를 하나로 묶어서 배포하기 위한 파일 형식입니다. JAR 파일은 ZIP 파일 포맷과 유사하게 만들어졌으며, 클래스 파일과 관련 리소스를 압축하여 하나의 파일로 만들어서 배포합니다. 이렇게 하면, 자바 애플리케이션을 배포하기가 쉬워지고, 라이브러리들을 쉽게 공유할 수 있습니다.\n  </aside>\n</li>\n</ul>","tableOfContents":"","frontmatter":{"title":"프로그래밍 기초 11","date":"June 12, 2023","description":"Package","tags":["개발","프로그래밍 기초","객체지향"]}},"previous":{"fields":{"slug":"/programming-basics/index0609/"},"frontmatter":{"title":"프로그래밍 기초 10"}},"next":{"fields":{"slug":"/programming-basics/index0613/"},"frontmatter":{"title":"프로그래밍 기초 12"}}},"pageContext":{"id":"2621eaeb-2f69-5b3d-b3b9-7aa8de1442f7","previousPostId":"661b6951-f5a7-5815-82e2-ca1d1430815e","nextPostId":"7d6ab9f2-1534-5e0c-b6a0-f3b546e14da6"}},"staticQueryHashes":["3000541721","3274528899"],"slicesMap":{}}