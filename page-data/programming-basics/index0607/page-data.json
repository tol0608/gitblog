{"componentChunkName":"component---src-templates-blog-post-js","path":"/programming-basics/index0607/","result":{"data":{"site":{"siteMetadata":{"title":"오늘도 앞으로"}},"markdownRemark":{"id":"aef6b4b2-160c-54ef-993d-2351a682fbb8","excerpt":"인스턴스 생성 및 사용 클래스 정의 클래스는 객체를 만들기 위한 청사진(blueprint…","html":"<ul>\n<li>\n<p>인스턴스 생성 및 사용</p>\n<h2 id=\"클래스-정의\" style=\"position:relative;\"><a href=\"#%ED%81%B4%EB%9E%98%EC%8A%A4-%EC%A0%95%EC%9D%98\" aria-label=\"클래스 정의 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>클래스 정의</h2>\n<p>클래스는 객체를 만들기 위한 청사진(blueprint)입니다. 클래스를 정의함으로써, 객체를 생성하기 전에 미리 어떤 속성과 메소드를 가지게 될지를 결정할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Car</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> brand<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> model<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> color<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Car</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> brand<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> model<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> color<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>brand <span class=\"token operator\">=</span> brand<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>model <span class=\"token operator\">=</span> model<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>color <span class=\"token operator\">=</span> color<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">startEngine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Engine started.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">stopEngine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Engine stopped.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>위의 예시에서 <code class=\"language-text\">Car</code> 클래스는 <code class=\"language-text\">brand</code>, <code class=\"language-text\">model</code>, <code class=\"language-text\">color</code> 속성과 <code class=\"language-text\">start_engine()</code>, <code class=\"language-text\">stop_engine()</code> 메소드를 가집니다.</p>\n<h2 id=\"인스턴스-생성\" style=\"position:relative;\"><a href=\"#%EC%9D%B8%EC%8A%A4%ED%84%B4%EC%8A%A4-%EC%83%9D%EC%84%B1\" aria-label=\"인스턴스 생성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>인스턴스 생성</h2>\n<p>클래스를 정의하고 나면, 이제 객체를 만들어 볼 차례입니다. 클래스를 기반으로 한 객체를 생성하는 것을 <strong>인스턴스화</strong>라고 합니다. <code class=\"language-text\">Car</code> 클래스를 기반으로 하는 인스턴스를 생성하기 위해서는 다음과 같은 코드를 작성합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">Car</span> my_car <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Car</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Tesla\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Model S\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"White\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>위의 코드에서 <code class=\"language-text\">my_car</code>는 <code class=\"language-text\">Car</code> 클래스의 인스턴스입니다. <code class=\"language-text\">Tesla</code>, <code class=\"language-text\">Model S</code>, <code class=\"language-text\">White</code>는 각각 <code class=\"language-text\">brand</code>, <code class=\"language-text\">model</code>, <code class=\"language-text\">color</code> 속성의 값으로 설정됩니다.</p>\n<h2 id=\"래퍼런스를-이용한-인스턴스-사용\" style=\"position:relative;\"><a href=\"#%EB%9E%98%ED%8D%BC%EB%9F%B0%EC%8A%A4%EB%A5%BC-%EC%9D%B4%EC%9A%A9%ED%95%9C-%EC%9D%B8%EC%8A%A4%ED%84%B4%EC%8A%A4-%EC%82%AC%EC%9A%A9\" aria-label=\"래퍼런스를 이용한 인스턴스 사용 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>래퍼런스를 이용한 인스턴스 사용</h2>\n<p>인스턴스를 생성한 후에는, 그 인스턴스를 이용하여 메소드를 호출하거나 속성에 접근할 수 있습니다. 객체를 참조하는 변수를 <strong>래퍼런스</strong>라고 합니다.</p>\n<p>예시:</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\">my_car<span class=\"token punctuation\">.</span><span class=\"token function\">startEngine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// Engine started.</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>my_car<span class=\"token punctuation\">.</span><span class=\"token function\">getColor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// White</span></code></pre></div>\n<p>위의 코드에서, <code class=\"language-text\">my_car</code>는 <code class=\"language-text\">Car</code> 클래스의 인스턴스를 참조하는 래퍼런스입니다. <code class=\"language-text\">start_engine()</code> 메소드와 <code class=\"language-text\">color</code> 속성에 각각 접근하여 결과를 출력하고 있습니다.</p>\n</li>\n<li>\n<p>인헨스드 <strong>for 문</strong></p>\n<p><code class=\"language-text\">for</code> 반복문을 이용하여 배열의 모든 요소를 반복하거나 컬렉션의 모든 요소를 반복할 수 있습니다. 이때 <code class=\"language-text\">for</code> 반복문에서 <code class=\"language-text\">:</code> 뒤에 배열 또는 컬렉션을 지정하면, 반복할 때마다 배열 또는 컬렉션의 요소를 차례대로 하나씩 꺼내서 변수에 할당합니다. 이렇게 변수에 할당된 요소를 이용하여 반복문 내부에서 원하는 작업을 수행할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> num <span class=\"token operator\">:</span> arr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>위의 코드에서는, 정수형 배열 <code class=\"language-text\">arr</code>의 모든 요소를 반복하면서, <code class=\"language-text\">num</code>이라는 이름의 변수에 하나씩 할당하고, 그 값을 출력하고 있습니다. 이러한 형태의 반복문을 <strong>인헨스드 for 문</strong>이라고 부릅니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> num <span class=\"token operator\">:</span> lotto<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span>num <span class=\"token operator\">+</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span></code></pre></div>\n<p>위 코드는 <code class=\"language-text\">lotto</code>라는 이름의 정수형 배열을 반복문을 이용하여 출력하는 코드입니다. <code class=\"language-text\">for</code> 반복문에서 <code class=\"language-text\">: (콜론)</code> 뒤에 <code class=\"language-text\">lotto</code> 배열을 선언하여, <code class=\"language-text\">num</code>이라는 이름의 변수에 <code class=\"language-text\">lotto</code> 배열의 각 요소가 할당됩니다. <code class=\"language-text\">for</code> 반복문의 중괄호 안에서는 <code class=\"language-text\">num</code> 변수를 출력하고, 뒤에 공백 하나를 추가하여 출력합니다.</p>\n<p>즉, <code class=\"language-text\">for</code> 반복문은 <code class=\"language-text\">lotto</code> 배열의 크기만큼 반복되며, 각 반복마다 <code class=\"language-text\">num</code> 변수에 <code class=\"language-text\">lotto</code> 배열의 요소가 할당됩니다. 이후 <code class=\"language-text\">num</code> 변수를 출력하고, 반복문을 빠져나와서 출력 결과는 <code class=\"language-text\">lotto</code> 배열에 저장된 모든 요소를 공백으로 구분하여 출력합니다.</p>\n</li>\n<li>\n<p>Class 변수</p>\n  <aside>\n  👉 객체의 속성을 클래스 변수로 정의할 수 있습니다. 클래스 변수는 어떤 인스턴스에서도 공유될 수 있는 변수입니다.\n<p>클래스 변수는 <code class=\"language-text\">static</code> 키워드를 사용하여 정의합니다. 클래스 변수를 사용하려면 클래스 이름과 함께 접근해야 합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">public class Rectangle {\n    private int width;\n    private int height;\n\n    public Rectangle(int width, int height) {\n        this.width = width;\n        this.height = height;\n    }\n\n    public int getWidth() {\n        return width;\n    }\n\n    public int getHeight() {\n        return height;\n    }\n\n    public int getArea() {\n        return width * height;\n    }\n}\n</code></pre></div>\n<p><code class=\"language-text\">Rectangle</code> 클래스는 <code class=\"language-text\">width</code>와 <code class=\"language-text\">height</code> 속성, 이러한 속성을 초기화하기 위한 생성자 및 사각형의 <code class=\"language-text\">width</code>, <code class=\"language-text\">height</code>, <code class=\"language-text\">area</code>를 가져오기 위한 세 가지 메소드가 있습니다.</p>\n<p>클래스 변수에 접근하려면 클래스 이름을 이용하면 됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Car</span><span class=\"token punctuation\">.</span><span class=\"token function\">getCount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>위의 코드에서 <code class=\"language-text\">getCount()</code> 메소드는 <code class=\"language-text\">count</code> 클래스 변수를 반환합니다. 이 메소드를 호출할 때는 <code class=\"language-text\">Car</code> 클래스 이름을 이용하여 호출합니다.</p>\n  </aside>\n</li>\n<li>\n<p>Stack</p>\n<p>FILO는 <strong>First In Last Out</strong>의 약자로, 먼저 들어간 데이터가 나중에 나오는 자료구조입니다. 이 구조는 데이터를 스택(Stack)이나 큐(Queue)와 같은 자료구조에서 사용할 수 있습니다. FILO 구조는 스택에서 사용됩니다. 스택은 데이터를 쌓아올리는 구조로, 가장 마지막에 들어온 데이터가 가장 먼저 나가게 됩니다. 이러한 특성은 함수의 호출 스택, 브라우저의 방문 기록 등 여러 곳에서 사용됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Stack</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">Stack</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> stack <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Stack</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        stack<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"apple\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        stack<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"banana\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        stack<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"cherry\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>stack<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// cherry</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>stack<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// banana</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>stack<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// apple</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>위의 코드에서 <code class=\"language-text\">Stack</code> 클래스를 이용하여 스택을 생성하고, <code class=\"language-text\">push()</code> 메소드를 이용하여 <code class=\"language-text\">apple</code>, <code class=\"language-text\">banana</code>, <code class=\"language-text\">cherry</code> 세 가지 데이터를 스택에 추가하고 있습니다. 그 다음 <code class=\"language-text\">pop()</code> 메소드를 이용하여 가장 마지막에 추가된 값부터 차례대로 꺼내고 있습니다. 따라서 출력 결과는 <code class=\"language-text\">cherry</code>, <code class=\"language-text\">banana</code>, <code class=\"language-text\">apple</code>이 됩니다.</p>\n</li>\n<li>\n<p>메서드</p>\n<p>클래스는 객체를 만들기 위한 청사진(blueprint)입니다. 클래스를 정의함으로써, 객체를 생성하기 전에 미리 어떤 속성과 메소드를 가지게 될지를 결정할 수 있습니다.</p>\n<p>메서드는 클래스가 가지고 있는 기능이나 동작을 의미합니다. 즉, 객체가 할 수 있는 일입니다. 메서드는 클래스 내부에 정의되며, 클래스의 속성을 이용하여 작동합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Car</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> brand<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> model<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> color<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Car</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> brand<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> model<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> color<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>brand <span class=\"token operator\">=</span> brand<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>model <span class=\"token operator\">=</span> model<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>color <span class=\"token operator\">=</span> color<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">startEngine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Engine started.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">stopEngine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Engine stopped.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>위의 예시에서 <code class=\"language-text\">Car</code> 클래스는 <code class=\"language-text\">brand</code>, <code class=\"language-text\">model</code>, <code class=\"language-text\">color</code> 속성과 <code class=\"language-text\">start_engine()</code>, <code class=\"language-text\">stop_engine()</code> 메소드를 가집니다.</p>\n<p>객체를 생성한 후, 메서드를 호출하려면 다음과 같은 코드를 작성합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\">my_car<span class=\"token punctuation\">.</span><span class=\"token function\">startEngine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// Engine started.</span></code></pre></div>\n<p><code class=\"language-text\">startEngine()</code> 메소드는 <code class=\"language-text\">my_car</code> 객체가 가지고 있는 기능 중 하나입니다. 이 메소드를 호출하면 엔진이 시작됩니다.</p>\n<p><img src=\"https://s3-us-west-2.amazonaws.com/secure.notion-static.com/6c8f7204-7dc9-40da-8df6-bd33c388781c/Untitled.png\" alt=\"Untitled\"></p>\n  <aside>\n  ➕ **Argument**와 **Parameter**는 프로그래밍에서 자주 사용되는 용어입니다. 이 두 용어는 서로 비슷한 의미를 가지고 있지만, 약간의 차이가 있습니다.\n<p><strong>Parameter</strong>는 함수나 메소드의 선언부에 있는 변수를 의미합니다. 함수나 메소드를 호출할 때, 이 변수에 값을 전달해주어야 합니다. 예를 들어, 다음과 같은 함수가 있다면:</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">printName</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>위의 코드에서 <code class=\"language-text\">name</code>은 함수의 <strong>Parameter</strong>입니다. 이 함수를 호출할 때, <code class=\"language-text\">printName(\"John\")</code>과 같이 값을 전달해주어야 합니다.</p>\n<p><strong>Argument</strong>는 함수나 메소드를 호출할 때 전달하는 값입니다. 예를 들어, 다음과 같은 함수가 있다면:</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">printName</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>위의 코드에서 <code class=\"language-text\">\"John\"</code>은 함수의 <strong>Argument</strong>입니다. 이 함수를 호출할 때, <code class=\"language-text\">printName(\"John\")</code>과 같이 값을 전달해줍니다.</p>\n<p>따라서, Parameter는 함수나 메소드의 선언부에서 정의되는 변수이고, Argument는 함수나 메소드를 호출할 때 전달되는 값입니다.</p>\n  </aside>\n</li>\n<li>\n<p>Return 문</p>\n<p><code class=\"language-text\">return</code> 문은 메소드나 함수에서 값을 반환할 때 사용됩니다. <code class=\"language-text\">return</code> 문은 메소드나 함수를 호출한 곳으로 값을 반환하고, 메소드나 함수를 종료합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Calculator</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> num1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> num2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> result <span class=\"token operator\">=</span> num1 <span class=\"token operator\">+</span> num2<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>위의 코드에서 <code class=\"language-text\">add()</code> 메소드는 <code class=\"language-text\">num1</code>과 <code class=\"language-text\">num2</code> 변수를 더한 결과를 <code class=\"language-text\">result</code> 변수에 저장한 후, <code class=\"language-text\">return</code> 문을 이용하여 <code class=\"language-text\">result</code> 값을 반환하고 있습니다. 따라서, <code class=\"language-text\">add(2, 3)</code>을 호출하면 <code class=\"language-text\">5</code>가 반환됩니다.</p>\n<p><code class=\"language-text\">return</code> 문은 값을 반환하는 것뿐만 아니라, 메소드나 함수를 종료하기 위해 사용됩니다. 예를 들어, 다음과 같은 코드가 있다면:</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">printNumbers</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> count<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> count<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">==</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>위의 코드에서 <code class=\"language-text\">printNumbers()</code> 메소드는 <code class=\"language-text\">count</code> 만큼 반복하면서, 0부터 <code class=\"language-text\">count</code>-1 까지의 숫자를 출력하고 있습니다. 그러나 <code class=\"language-text\">i == 5</code>일 때 <code class=\"language-text\">return</code> 문을 이용하여 메소드를 종료하고 있습니다. 따라서, <code class=\"language-text\">printNumbers(10)</code>을 호출하면 0부터 5까지의 숫자만 출력되고, 6부터 9까지의 숫자는 출력되지 않습니다.</p>\n</li>\n</ul>","tableOfContents":"","frontmatter":{"title":"프로그래밍 기초 8","date":"June 07, 2023","description":"인스턴스, 인헨스드 for문","tags":["개발","프로그래밍 기초","객체지향"]}},"previous":{"fields":{"slug":"/programming-basics/index0602/"},"frontmatter":{"title":"프로그래밍 기초 7"}},"next":{"fields":{"slug":"/programming-basics/index0608/"},"frontmatter":{"title":"프로그래밍 기초 9"}}},"pageContext":{"id":"aef6b4b2-160c-54ef-993d-2351a682fbb8","previousPostId":"e1744b42-022a-5f05-beed-187345ab9bc2","nextPostId":"5d25f01c-2e71-5729-adce-2366de4b810c"}},"staticQueryHashes":["3000541721","3274528899"],"slicesMap":{}}