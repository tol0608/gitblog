{"componentChunkName":"component---src-templates-blog-post-js","path":"/React/index0720/","result":{"data":{"site":{"siteMetadata":{"title":"오늘도 앞으로"}},"markdownRemark":{"id":"ee6c6ee8-231d-5e33-b747-9d3e7daeb2e1","excerpt":"엘리먼트 Key Key는 React에서 동적으로 생성되는 컴포넌트 리스트에서 각 요소가 고유하게 식별되도록 돕는 역할을 합니다. Key는 React가 컴포넌트 리스트를 업데이트할 때 사용됩니다. Key가 없는 경우 리스트의 순서가\n바뀌거나 아이템이 추가/삭제될 때 React…","html":"<h2 id=\"엘리먼트\" style=\"position:relative;\"><a href=\"#%EC%97%98%EB%A6%AC%EB%A8%BC%ED%8A%B8\" aria-label=\"엘리먼트 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>엘리먼트</h2>\n<h3 id=\"Key\" style=\"position:relative;\"><a href=\"#Key\" aria-label=\"Key permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Key</h3>\n<p>Key는 React에서 동적으로 생성되는 컴포넌트 리스트에서 각 요소가 고유하게 식별되도록 돕는 역할을 합니다. Key는 React가 컴포넌트 리스트를 업데이트할 때 사용됩니다. Key가 없는 경우 리스트의 순서가\n바뀌거나 아이템이 추가/삭제될 때 React는 이전에 렌더링된 결과를 기반으로 변경사항을 계산하게 되고, 이때 변경사항이 예상과 다를 수 있습니다. Key를 사용하면 React는 각 아이템이 고유한 ID를 가지고\n있기 때문에 변경사항을 더 정확하게 계산할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">var</span> items <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'연어 500그램'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'잣 1 컵'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'버터 상추 2컵'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'옐로 스쿼시(Yellow Squash, 호박의 한 종류) 1개'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'올리브 오일 1/2 컵'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'마늘 3 쪽'</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">var</span> dish <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'ul'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">className</span><span class=\"token operator\">:</span> <span class=\"token string\">'ingredients'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    items<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">ingredients</span> <span class=\"token operator\">=></span> React<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'li'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> ingredients<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'dish'</span><span class=\"token punctuation\">,</span> dish<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> container <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.react-container'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    ReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span>dish<span class=\"token punctuation\">,</span> container<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nwindow<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'load'</span><span class=\"token punctuation\">,</span> init<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">var</span> items <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'연어 500그램'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'잣 1 컵'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'버터 상추 2컵'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'옐로 스쿼시(Yellow Squash, 호박의 한 종류) 1개'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'올리브 오일 1/2 컵'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'마늘 3 쪽'</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">var</span> dish <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'ul'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">className</span><span class=\"token operator\">:</span> <span class=\"token string\">'ingredients'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    items<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">ingredients<span class=\"token punctuation\">,</span> i</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> React<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'li'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">key</span><span class=\"token operator\">:</span> i<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> ingredients<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'dish'</span><span class=\"token punctuation\">,</span> dish<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> container <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.react-container'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    ReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span>dish<span class=\"token punctuation\">,</span> container<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nwindow<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'load'</span><span class=\"token punctuation\">,</span> init<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>위 코드는 React를 사용하여 <code class=\"language-text\">items</code>라는 리스트를 표시하는 <code class=\"language-text\">&lt;ul></code> 엘리먼트를 생성하는 예제입니다. <code class=\"language-text\">items</code> 리스트를 <code class=\"language-text\">map()</code> 함수를 사용하여 <code class=\"language-text\">&lt;li></code> 엘리먼트로 변환하고, <code class=\"language-text\">key</code>\nprop을 사용하여 각각의 <code class=\"language-text\">&lt;li></code> 엘리먼트에 고유한 ID 값을 부여합니다. 이렇게 함으로써 React는 업데이트시 더욱 정확하게 바뀐 부분을 인식할 수 있게 됩니다.\n마지막으로, <code class=\"language-text\">ReactDOM.render()</code> 함수를 사용하여 <code class=\"language-text\">dish</code> 엘리먼트를 <code class=\"language-text\">.react-container</code>에 렌더링합니다.</p>\n<h3 id=\"컴포넌트\" style=\"position:relative;\"><a href=\"#%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8\" aria-label=\"컴포넌트 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>컴포넌트</h3>\n<p>컴포넌트는 UI를 구성하는 독립적인 모듈입니다. 컴포넌트를 사용하면 UI를 여러 개의 재사용 가능한 조각으로 나눌 수 있습니다. 이를 통해 코드의 재사용성과 유지보수성이 증가하게 됩니다.</p>\n<p>React에서 모든 UI 요소는 컴포넌트로 나눌 수 있습니다. 이렇게 나눈 컴포넌트들은 중첩하여 사용할 수 있으며, 각각의 컴포넌트는 독립적으로 작동합니다.</p>\n<h3 id=\"예시\" style=\"position:relative;\"><a href=\"#%EC%98%88%EC%8B%9C\" aria-label=\"예시 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>예시</h3>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Greeting</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Hello, </span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">}</span><span class=\"token plain-text\">!</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\nReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Greeting</span></span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>React<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span><span class=\"token punctuation\">,</span>\n    document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'root'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>위 코드는 <code class=\"language-text\">Greeting</code>이라는 컴포넌트를 생성하고, <code class=\"language-text\">ReactDOM.render()</code> 함수를 사용하여 <code class=\"language-text\">Greeting</code> 컴포넌트를 렌더링하는 예제입니다. <code class=\"language-text\">Greeting</code> 컴포넌트는 <code class=\"language-text\">name</code> prop을\n받아와서 <code class=\"language-text\">Hello, {name}!</code>이라는 메시지를 표시합니다. 이렇게 하면 <code class=\"language-text\">name</code> prop이 변경될 때마다 컴포넌트가 업데이트되어 새로운 메시지를 표시하게 됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">Button</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>onClick<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n            </span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>label<span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Counter</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">count</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token function\">handleClick</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">state</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n            <span class=\"token literal-property property\">count</span><span class=\"token operator\">:</span> state<span class=\"token punctuation\">.</span>count <span class=\"token operator\">+</span> <span class=\"token number\">1</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n                </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">You clicked </span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>count<span class=\"token punctuation\">}</span><span class=\"token plain-text\"> times.</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n                </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Button</span></span>\n                    <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">handleClick</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span>\n                    <span class=\"token attr-name\">label</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Click me<span class=\"token punctuation\">\"</span></span>\n                <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n            </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\nReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Counter</span></span><span class=\"token punctuation\">/></span></span><span class=\"token punctuation\">,</span>\n    document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'root'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>위 코드는 <code class=\"language-text\">Button</code>과 <code class=\"language-text\">Counter</code>라는 두 개의 컴포넌트를 생성하고, <code class=\"language-text\">ReactDOM.render()</code> 함수를 사용하여 <code class=\"language-text\">Counter</code> 컴포넌트를 렌더링하는 예제입니다. <code class=\"language-text\">Button</code>\n컴포넌트는 <code class=\"language-text\">onClick</code> prop을 받아와서 버튼을 클릭했을 때 <code class=\"language-text\">onClick</code> 함수를 호출합니다. <code class=\"language-text\">Counter</code> 컴포넌트는 <code class=\"language-text\">count</code> state를 가지고 있으며, 버튼을 클릭할 때마다 <code class=\"language-text\">count</code>\n값을 증가시킵니다. 이렇게 하면 화면에는 'You clicked {count} times'라는 메시지와 'Click me'라는 버튼이 표시됩니다.</p>\n<h3 id=\"함수형-컴포넌트\" style=\"position:relative;\"><a href=\"#%ED%95%A8%EC%88%98%ED%98%95-%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8\" aria-label=\"함수형 컴포넌트 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>함수형 컴포넌트</h3>\n<p>함수형 컴포넌트는 함수로 구현된 컴포넌트이며, <code class=\"language-text\">props</code>를 인자로 받아서 JSX를 반환합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">Welcome</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Hello, </span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>함수형 컴포넌트는 상태(state)를 가지지 않으며, 라이프사이클 메서드(<code class=\"language-text\">componentDidMount</code>, <code class=\"language-text\">componentWillUnmount</code>, 등)를 사용할 수 없습니다. 하지만 컴포넌트의 역할이 단순한\n경우, 클래스형 컴포넌트 대신 함수형 컴포넌트를 사용하는 것이 더 효율적입니다.</p>\n<p>함수형 컴포넌트의 장점:</p>\n<ul>\n<li>코드가 간결하고 명확합니다.</li>\n<li>클래스형 컴포넌트보다 성능이 더 좋습니다.</li>\n<li>상태를 가지지 않으므로 예측 가능하며 테스트하기 쉽습니다.</li>\n</ul>\n<p>함수형 컴포넌트의 단점:</p>\n<ul>\n<li>라이프사이클 메서드를 사용할 수 없습니다.</li>\n<li>상태를 가지지 않으므로, 상태를 변경할 수 없습니다.</li>\n</ul>\n<h3 id=\"클래스형-컴포넌트\" style=\"position:relative;\"><a href=\"#%ED%81%B4%EB%9E%98%EC%8A%A4%ED%98%95-%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8\" aria-label=\"클래스형 컴포넌트 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>클래스형 컴포넌트</h3>\n<p>클래스형 컴포넌트는 <code class=\"language-text\">React.Component</code> 클래스를 상속받아서 구현됩니다. <code class=\"language-text\">render()</code> 메서드를 구현하여 JSX를 반환합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Welcome</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Hello, </span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\ns</code></pre></div>\n<p>클래스형 컴포넌트는 상태(state)를 가지며, 라이프사이클 메서드(<code class=\"language-text\">componentDidMount</code>, <code class=\"language-text\">componentWillUnmount</code>, 등)를 사용할 수 있습니다. 상태를 변경할 수 있으므로, 상태에\n따라 UI를 변경해야 하는 경우 클래스형 컴포넌트를 사용하는 것이 좋습니다.</p>\n<p>클래스형 컴포넌트의 장점:</p>\n<ul>\n<li>상태(state)를 가지므로, 상태에 따라 UI를 변경할 수 있습니다.</li>\n<li>라이프사이클 메서드를 사용할 수 있습니다.</li>\n</ul>\n<p>클래스형 컴포넌트의 단점:</p>\n<ul>\n<li>코드가 복잡하고, 함수형 컴포넌트보다 성능이 더 떨어집니다.</li>\n<li>상태(state)를 가지므로 예측하기 어렵고, 테스트하기 어렵습니다.</li>\n</ul>\n<h3 id=\"예시-1\" style=\"position:relative;\"><a href=\"#%EC%98%88%EC%8B%9C-1\" aria-label=\"예시 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>예시</h3>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// 함수형 컴포넌트 예제</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">Welcome</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Hello, </span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">}</span><span class=\"token plain-text\">!</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 클래스형 컴포넌트 예제</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Welcome</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Hello, </span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">}</span><span class=\"token plain-text\">!</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>위 예제에서 <code class=\"language-text\">Welcome</code> 컴포넌트는 함수형 컴포넌트와 클래스형 컴포넌트 두 가지 방식으로 구현되었습니다. <code class=\"language-text\">Welcome</code> 컴포넌트는 <code class=\"language-text\">props</code>를 받아서 <code class=\"language-text\">Hello, {props.name}!</code>이라는\n메시지를 표시합니다.</p>\n<h3 id=\"옛날-방식과-요즘-클래스\" style=\"position:relative;\"><a href=\"#%EC%98%9B%EB%82%A0-%EB%B0%A9%EC%8B%9D%EA%B3%BC-%EC%9A%94%EC%A6%98-%ED%81%B4%EB%9E%98%EC%8A%A4\" aria-label=\"옛날 방식과 요즘 클래스 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>옛날 방식과 요즘 클래스</h3>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\">    <span class=\"token comment\">// 옛날방식 -> 생성자 함수를 이용한 명시적...</span>\n    <span class=\"token comment\">// 함수이름이 대문자로 시작하면 생성자 함수</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">Vacation</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">destination<span class=\"token punctuation\">,</span> length</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>destination <span class=\"token operator\">=</span> destination<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>length <span class=\"token operator\">=</span> length<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token class-name\">Vacation</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">print</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'이번 휴가는 '</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>destination <span class=\"token operator\">+</span> <span class=\"token string\">'으로 '</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>length <span class=\"token operator\">+</span> <span class=\"token string\">'떠남'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> obj <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Vacation</span><span class=\"token punctuation\">(</span><span class=\"token string\">'하와이'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nobj<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\">    <span class=\"token keyword\">class</span> <span class=\"token class-name\">Vacation</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">destination<span class=\"token punctuation\">,</span> length</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>destination <span class=\"token operator\">=</span> destination<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>length <span class=\"token operator\">=</span> length<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'이번 휴가는 '</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>destination <span class=\"token operator\">+</span> <span class=\"token string\">'으로 '</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>length <span class=\"token operator\">+</span> <span class=\"token string\">'떠남'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nobj <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Vacation</span><span class=\"token punctuation\">(</span><span class=\"token string\">'하와이'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nobj<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3 id=\"객체-구조-분해\" style=\"position:relative;\"><a href=\"#%EA%B0%9D%EC%B2%B4-%EA%B5%AC%EC%A1%B0-%EB%B6%84%ED%95%B4\" aria-label=\"객체 구조 분해 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>객체 구조 분해</h3>\n<p>객체 구조 분해는 자바스크립트의 기능 중 하나로, 객체에서 속성을 추출하고 변수에 할당하는 것을 더 간결하고 가독성 높은 방법으로 할 수 있게 합니다.</p>\n<p>다음은 예시입니다:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> person <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'John'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">age</span><span class=\"token operator\">:</span> <span class=\"token number\">30</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">location</span><span class=\"token operator\">:</span> <span class=\"token string\">'New York'</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>name<span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">,</span> location<span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> person<span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>      <span class=\"token comment\">// 출력: 'John'</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>       <span class=\"token comment\">// 출력: 30</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>location<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 출력: 'New York'</span></code></pre></div>\n<p>이 예시에서는 <code class=\"language-text\">person</code>이라는 객체가 세 개의 속성, 즉 <code class=\"language-text\">name</code>, <code class=\"language-text\">age</code>, <code class=\"language-text\">location</code>을 가지고 있습니다. 객체 구조 분해를 사용하여 이러한 속성들을 추출하고 같은 이름의 변수에 할당합니다.\n그러면 이 변수들을 사용하여 객체에서 해당 값을 가져올 수 있습니다.</p>\n<p>객체 구조 분해는 함수 매개변수를 다룰 때 매우 유용합니다. 다음은 예시입니다:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">printPersonInfo</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span>name<span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">,</span> location<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Name: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Age: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>age<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Location: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>location<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> person <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'John'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">age</span><span class=\"token operator\">:</span> <span class=\"token number\">30</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">location</span><span class=\"token operator\">:</span> <span class=\"token string\">'New York'</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">printPersonInfo</span><span class=\"token punctuation\">(</span>person<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>이 예시에서는 객체를 매개변수로 받는 <code class=\"language-text\">printPersonInfo</code> 함수를 정의하고, 객체 구조 분해를 사용하여 <code class=\"language-text\">name</code>, <code class=\"language-text\">age</code>, <code class=\"language-text\">location</code> 속성을 추출합니다. 그런 다음 이 변수들을 사용하여\n객체에서 해당 값을 출력합니다.</p>\n<p>객체 구조 분해는 중첩된 객체와 배열에서도 사용할 수 있습니다. 다음은 예시입니다:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> person <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'John'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">age</span><span class=\"token operator\">:</span> <span class=\"token number\">30</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">location</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token literal-property property\">city</span><span class=\"token operator\">:</span> <span class=\"token string\">'New York'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">state</span><span class=\"token operator\">:</span> <span class=\"token string\">'NY'</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">hobbies</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'reading'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'traveling'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'hiking'</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>name<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">location</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>city<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">hobbies</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>firstHobby<span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> person<span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>        <span class=\"token comment\">// 출력: 'John'</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>city<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>        <span class=\"token comment\">// 출력: 'New York'</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>firstHobby<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 출력: 'reading'</span></code></pre></div>\n<p>이 예시에서는 중첩된 속성과 배열이 포함된 객체를 사용합니다. 객체 구조 분해를 사용하여 중첩된 <code class=\"language-text\">location</code> 속성에서 <code class=\"language-text\">city</code> 속성과 <code class=\"language-text\">hobbies</code> 배열에서 첫 번째 취미를 추출합니다.</p>\n<p>총괄적으로, 객체 구조 분해는 자바스크립트의 강력한 기능 중 하나로, 코드를 더 간결하고 가독성 좋게 만들어 줍니다.</p>\n<h3 id=\"리터럴객체--암시적-방법으로-만든-객체--리터럴객체-개선\" style=\"position:relative;\"><a href=\"#%EB%A6%AC%ED%84%B0%EB%9F%B4%EA%B0%9D%EC%B2%B4--%EC%95%94%EC%8B%9C%EC%A0%81-%EB%B0%A9%EB%B2%95%EC%9C%BC%EB%A1%9C-%EB%A7%8C%EB%93%A0-%EA%B0%9D%EC%B2%B4--%EB%A6%AC%ED%84%B0%EB%9F%B4%EA%B0%9D%EC%B2%B4-%EA%B0%9C%EC%84%A0\" aria-label=\"리터럴객체  암시적 방법으로 만든 객체  리터럴객체 개선 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>리터럴객체 = 암시적 방법으로 만든 객체 → 리터럴객체 개선</h3>\n<p>리터럴객체는 변수에 할당되는 객체 표기법 중 하나로, 중괄호({}) 안에 속성(key)과 값(value)을 쉼표(,)로 구분하여 작성하는 것입니다. 이를 통해 객체를 쉽고 간편하게 생성할 수 있습니다.</p>\n<p>예를 들어, 다음과 같은 객체가 있다고 가정해봅시다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> person <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'John'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">age</span><span class=\"token operator\">:</span> <span class=\"token number\">30</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">city</span><span class=\"token operator\">:</span> <span class=\"token string\">'New York'</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>위 예시에서 <code class=\"language-text\">person</code>은 리터럴객체로 생성되었습니다. 객체 리터럴 표기법을 사용하여 <code class=\"language-text\">name</code>, <code class=\"language-text\">age</code>, <code class=\"language-text\">city</code> 속성을 정의하고, 해당 값으로 각각 <code class=\"language-text\">'John'</code>, <code class=\"language-text\">30</code>, <code class=\"language-text\">'New York'</code>\n을 할당했습니다.</p>\n<p>리터럴객체는 객체를 생성하고 초기화하는 데 사용할 수 있습니다. 객체 리터럴 표기법은 복잡한 객체나 중첩된 객체를 만들 때도 유용합니다. 예를 들어, 다음과 같은 중첩된 객체를 만들 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> person <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'John'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">age</span><span class=\"token operator\">:</span> <span class=\"token number\">30</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">address</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token literal-property property\">street</span><span class=\"token operator\">:</span> <span class=\"token string\">'123 Main St'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">city</span><span class=\"token operator\">:</span> <span class=\"token string\">'New York'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">state</span><span class=\"token operator\">:</span> <span class=\"token string\">'NY'</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>위 예시에서 <code class=\"language-text\">person</code> 객체는 <code class=\"language-text\">address</code> 속성을 가지고 있으며, 이 속성은 또다른 중첩된 객체를 가지고 있습니다. 이렇게 객체를 중첩하여 구성하면, 복잡한 데이터를 보다 쉽게 관리할 수 있습니다.</p>\n<p>리터럴객체는 코드를 더 간결하고 가독성 좋게 만들어주는 장점이 있습니다. 또한, 객체를 생성할 때 일반적으로 사용되는 방식이기 때문에 익숙해질 필요가 있습니다.</p>\n<h3 id=\"객체-리터럴-개선\" style=\"position:relative;\"><a href=\"#%EA%B0%9D%EC%B2%B4-%EB%A6%AC%ED%84%B0%EB%9F%B4-%EA%B0%9C%EC%84%A0\" aria-label=\"객체 리터럴 개선 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>객체 리터럴 개선</h3>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">var</span> name <span class=\"token operator\">=</span> <span class=\"token string\">'손흥민'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> gender <span class=\"token operator\">=</span> <span class=\"token string\">'남자'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> age <span class=\"token operator\">=</span> <span class=\"token number\">31</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> <span class=\"token function-variable function\">play</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">+</span> <span class=\"token string\">'이 축구를 때림'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> person <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>name<span class=\"token punctuation\">,</span> gender<span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">,</span> play<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nperson<span class=\"token punctuation\">.</span><span class=\"token function\">play</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// 보이는 값 -> 손흥민이 축구를 때림</span></code></pre></div>","tableOfContents":"<ul>\n<li>\n<p><a href=\"#%EC%97%98%EB%A6%AC%EB%A8%BC%ED%8A%B8\">엘리먼트</a></p>\n<ul>\n<li><a href=\"#key\">Key</a></li>\n<li><a href=\"#%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8\">컴포넌트</a></li>\n<li><a href=\"#%EC%98%88%EC%8B%9C\">예시</a></li>\n<li><a href=\"#%ED%95%A8%EC%88%98%ED%98%95-%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8\">함수형 컴포넌트</a></li>\n<li><a href=\"#%ED%81%B4%EB%9E%98%EC%8A%A4%ED%98%95-%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8\">클래스형 컴포넌트</a></li>\n<li><a href=\"#%EC%98%88%EC%8B%9C-1\">예시</a></li>\n<li><a href=\"#%EC%98%9B%EB%82%A0-%EB%B0%A9%EC%8B%9D%EA%B3%BC-%EC%9A%94%EC%A6%98-%ED%81%B4%EB%9E%98%EC%8A%A4\">옛날 방식과 요즘 클래스</a></li>\n<li><a href=\"#%EA%B0%9D%EC%B2%B4-%EA%B5%AC%EC%A1%B0-%EB%B6%84%ED%95%B4\">객체 구조 분해</a></li>\n<li><a href=\"#%EB%A6%AC%ED%84%B0%EB%9F%B4%EA%B0%9D%EC%B2%B4--%EC%95%94%EC%8B%9C%EC%A0%81-%EB%B0%A9%EB%B2%95%EC%9C%BC%EB%A1%9C-%EB%A7%8C%EB%93%A0-%EA%B0%9D%EC%B2%B4--%EB%A6%AC%ED%84%B0%EB%9F%B4%EA%B0%9D%EC%B2%B4-%EA%B0%9C%EC%84%A0\">리터럴객체 = 암시적 방법으로 만든 객체 → 리터럴객체 개선</a></li>\n<li><a href=\"#%EA%B0%9D%EC%B2%B4-%EB%A6%AC%ED%84%B0%EB%9F%B4-%EA%B0%9C%EC%84%A0\">객체 리터럴 개선</a></li>\n</ul>\n</li>\n</ul>","frontmatter":{"title":"엘리먼트와 컴포넌트","date":"July 20, 2023","description":"React","tags":["웹개발","프로그래밍","JAVASCRIPT","React","컴포넌트","엘리먼트"]}},"previous":{"fields":{"slug":"/React/index0719/"},"frontmatter":{"title":"forEach 와 map"}},"next":{"fields":{"slug":"/React/index0721/"},"frontmatter":{"title":"JSX"}}},"pageContext":{"id":"ee6c6ee8-231d-5e33-b747-9d3e7daeb2e1","previousPostId":"e7240982-3226-5ef0-a8bd-9154d527ab57","nextPostId":"77d99084-a17c-5df5-94d8-82d719b3a14f"}},"staticQueryHashes":["3000541721","3274528899"],"slicesMap":{}}